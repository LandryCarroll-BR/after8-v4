/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    fragment HeaderGeneralSettingsFragment on GeneralSettings {\n      title\n      description\n    }\n  ": types.HeaderGeneralSettingsFragmentFragmentDoc,
    "\n    fragment PrimaryMenuItemFragment on MenuItem {\n      id\n      uri\n      path\n      label\n      parentId\n      cssClasses\n      menu {\n        node {\n          name\n        }\n      }\n    }\n  ": types.PrimaryMenuItemFragmentFragmentDoc,
    "\n  query GetAboutPage($databaseId: ID!, $asPreview: Boolean = false) {\n  page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        fullHead\n      }\n      title\n      content\n      about {\n        hero {\n          body\n          headingLine1\n          headingLine2\n          image1 {\n            sourceUrl\n          }\n          image2 {\n            sourceUrl\n          }\n          image3 {\n            sourceUrl\n          }\n        }\n        cta {\n          body\n          button {\n            title\n            url\n          }\n          heading\n          imageDesktop {\n            sourceUrl\n          }\n        }\n        aboutSection {\n          body\n          heading\n        }\n        calloutBox {\n          body\n          heading\n          link {\n            title\n            url\n          }\n        }\n        bandSection {\n          bandMembers {\n            image {\n              sourceUrl\n            }\n            name\n            description\n          }\n        }\n      }\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetAboutPageDocument,
    "\n  query GetArchive($uri: String!, $databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      seo {\n        fullHead\n      }\n    }\n    nodeByUri(uri: $uri) {\n      archiveType: __typename\n      ... on Category {\n        name\n        posts {\n          nodes {\n            id\n            title\n            uri\n          }\n        }\n      }\n      ... on Tag {\n        name\n        posts {\n          nodes {\n            id\n            title\n            uri\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetArchiveDocument,
    "\n  mutation SubmitForm($databaseId: ID!, $fieldValues: [FormFieldValuesInput]!) {\n    submitGfForm(input: { id: $databaseId, fieldValues: $fieldValues }) {\n      confirmation {\n        message\n      }\n      errors {\n        id\n        message\n      }\n    }\n  }\n": types.SubmitFormDocument,
    "\n  query GetContactPage($databaseId: ID!, $asPreview: Boolean = false) {\n  page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        fullHead\n      }\n      title\n      content\n      contact {\n        hero {\n          heading\n          body\n          heroImageDesktop {\n            sourceUrl\n            altText\n          }\n        }\n      }\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetContactPageDocument,
    "\n  query GetHomePage($databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      id\n      seo {\n        fullHead\n      }\n      title\n      content\n      home {\n        hero {\n          headingLine1\n          headingLine2\n          bgImageDesktop {\n            sourceUrl\n          }\n          bgImageMobile {\n            sourceUrl\n          }\n          blurb\n          cta {\n            url\n            title\n          }\n        }\n        aboutSection {\n          aboutHeading\n          featuredGrid {\n            image1 {\n              sourceUrl\n            }\n            image2 {\n              sourceUrl\n            }\n            body\n            link {\n              url\n              title\n            }\n          }\n        }\n        awardsSection {\n          awardsHeading\n          awardsBody\n          theKnotLink {\n            url\n            title\n          }\n          weddingWireLink {\n            url\n            title\n          }\n          awardsImages {\n            awardLogo {\n              sourceUrl\n            }\n          }\n        }\n        ctaSection {\n          ctaHeading\n          ctaImage {\n            sourceUrl\n          }\n          ctaLink {\n            url\n            title\n          }\n        }\n      }\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetHomePageDocument,
    "\n  query GetPage($databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      seo {\n        fullHead\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetPageDocument,
    "\n  query GetPost($databaseId: ID!, $asPreview: Boolean = false) {\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      date\n      seo {\n        fullHead\n      }\n      author {\n        node {\n          name\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetPostDocument,
    "\n  query GetSongListPage($databaseId: ID!, $asPreview: Boolean = false) {\n  page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        fullHead\n      }\n      title\n      content\n      songList {\n        hero {\n          body\n          heading\n          backgroundImage {\n            sourceUrl\n          }\n          songListFile {\n            link\n          }\n        }\n      }\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetSongListPageDocument,
    "\n  query GetUpcomingShowsPage($databaseId: ID!, $asPreview: Boolean = false) {\n  page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        fullHead\n      }\n      title\n      content\n      upcomingShows {\n        featuredEvents {\n          eventEndTime\n          eventStartTime\n          eventTitle\n          eventLocation\n          eventBackgroundImage {\n            sourceUrl\n          }\n        }\n      }\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetUpcomingShowsPageDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment HeaderGeneralSettingsFragment on GeneralSettings {\n      title\n      description\n    }\n  "): (typeof documents)["\n    fragment HeaderGeneralSettingsFragment on GeneralSettings {\n      title\n      description\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment PrimaryMenuItemFragment on MenuItem {\n      id\n      uri\n      path\n      label\n      parentId\n      cssClasses\n      menu {\n        node {\n          name\n        }\n      }\n    }\n  "): (typeof documents)["\n    fragment PrimaryMenuItemFragment on MenuItem {\n      id\n      uri\n      path\n      label\n      parentId\n      cssClasses\n      menu {\n        node {\n          name\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAboutPage($databaseId: ID!, $asPreview: Boolean = false) {\n  page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        fullHead\n      }\n      title\n      content\n      about {\n        hero {\n          body\n          headingLine1\n          headingLine2\n          image1 {\n            sourceUrl\n          }\n          image2 {\n            sourceUrl\n          }\n          image3 {\n            sourceUrl\n          }\n        }\n        cta {\n          body\n          button {\n            title\n            url\n          }\n          heading\n          imageDesktop {\n            sourceUrl\n          }\n        }\n        aboutSection {\n          body\n          heading\n        }\n        calloutBox {\n          body\n          heading\n          link {\n            title\n            url\n          }\n        }\n        bandSection {\n          bandMembers {\n            image {\n              sourceUrl\n            }\n            name\n            description\n          }\n        }\n      }\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAboutPage($databaseId: ID!, $asPreview: Boolean = false) {\n  page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        fullHead\n      }\n      title\n      content\n      about {\n        hero {\n          body\n          headingLine1\n          headingLine2\n          image1 {\n            sourceUrl\n          }\n          image2 {\n            sourceUrl\n          }\n          image3 {\n            sourceUrl\n          }\n        }\n        cta {\n          body\n          button {\n            title\n            url\n          }\n          heading\n          imageDesktop {\n            sourceUrl\n          }\n        }\n        aboutSection {\n          body\n          heading\n        }\n        calloutBox {\n          body\n          heading\n          link {\n            title\n            url\n          }\n        }\n        bandSection {\n          bandMembers {\n            image {\n              sourceUrl\n            }\n            name\n            description\n          }\n        }\n      }\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetArchive($uri: String!, $databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      seo {\n        fullHead\n      }\n    }\n    nodeByUri(uri: $uri) {\n      archiveType: __typename\n      ... on Category {\n        name\n        posts {\n          nodes {\n            id\n            title\n            uri\n          }\n        }\n      }\n      ... on Tag {\n        name\n        posts {\n          nodes {\n            id\n            title\n            uri\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetArchive($uri: String!, $databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      seo {\n        fullHead\n      }\n    }\n    nodeByUri(uri: $uri) {\n      archiveType: __typename\n      ... on Category {\n        name\n        posts {\n          nodes {\n            id\n            title\n            uri\n          }\n        }\n      }\n      ... on Tag {\n        name\n        posts {\n          nodes {\n            id\n            title\n            uri\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation SubmitForm($databaseId: ID!, $fieldValues: [FormFieldValuesInput]!) {\n    submitGfForm(input: { id: $databaseId, fieldValues: $fieldValues }) {\n      confirmation {\n        message\n      }\n      errors {\n        id\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SubmitForm($databaseId: ID!, $fieldValues: [FormFieldValuesInput]!) {\n    submitGfForm(input: { id: $databaseId, fieldValues: $fieldValues }) {\n      confirmation {\n        message\n      }\n      errors {\n        id\n        message\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetContactPage($databaseId: ID!, $asPreview: Boolean = false) {\n  page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        fullHead\n      }\n      title\n      content\n      contact {\n        hero {\n          heading\n          body\n          heroImageDesktop {\n            sourceUrl\n            altText\n          }\n        }\n      }\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetContactPage($databaseId: ID!, $asPreview: Boolean = false) {\n  page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        fullHead\n      }\n      title\n      content\n      contact {\n        hero {\n          heading\n          body\n          heroImageDesktop {\n            sourceUrl\n            altText\n          }\n        }\n      }\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetHomePage($databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      id\n      seo {\n        fullHead\n      }\n      title\n      content\n      home {\n        hero {\n          headingLine1\n          headingLine2\n          bgImageDesktop {\n            sourceUrl\n          }\n          bgImageMobile {\n            sourceUrl\n          }\n          blurb\n          cta {\n            url\n            title\n          }\n        }\n        aboutSection {\n          aboutHeading\n          featuredGrid {\n            image1 {\n              sourceUrl\n            }\n            image2 {\n              sourceUrl\n            }\n            body\n            link {\n              url\n              title\n            }\n          }\n        }\n        awardsSection {\n          awardsHeading\n          awardsBody\n          theKnotLink {\n            url\n            title\n          }\n          weddingWireLink {\n            url\n            title\n          }\n          awardsImages {\n            awardLogo {\n              sourceUrl\n            }\n          }\n        }\n        ctaSection {\n          ctaHeading\n          ctaImage {\n            sourceUrl\n          }\n          ctaLink {\n            url\n            title\n          }\n        }\n      }\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetHomePage($databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      id\n      seo {\n        fullHead\n      }\n      title\n      content\n      home {\n        hero {\n          headingLine1\n          headingLine2\n          bgImageDesktop {\n            sourceUrl\n          }\n          bgImageMobile {\n            sourceUrl\n          }\n          blurb\n          cta {\n            url\n            title\n          }\n        }\n        aboutSection {\n          aboutHeading\n          featuredGrid {\n            image1 {\n              sourceUrl\n            }\n            image2 {\n              sourceUrl\n            }\n            body\n            link {\n              url\n              title\n            }\n          }\n        }\n        awardsSection {\n          awardsHeading\n          awardsBody\n          theKnotLink {\n            url\n            title\n          }\n          weddingWireLink {\n            url\n            title\n          }\n          awardsImages {\n            awardLogo {\n              sourceUrl\n            }\n          }\n        }\n        ctaSection {\n          ctaHeading\n          ctaImage {\n            sourceUrl\n          }\n          ctaLink {\n            url\n            title\n          }\n        }\n      }\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPage($databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      seo {\n        fullHead\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPage($databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      seo {\n        fullHead\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPost($databaseId: ID!, $asPreview: Boolean = false) {\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      date\n      seo {\n        fullHead\n      }\n      author {\n        node {\n          name\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPost($databaseId: ID!, $asPreview: Boolean = false) {\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      date\n      seo {\n        fullHead\n      }\n      author {\n        node {\n          name\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSongListPage($databaseId: ID!, $asPreview: Boolean = false) {\n  page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        fullHead\n      }\n      title\n      content\n      songList {\n        hero {\n          body\n          heading\n          backgroundImage {\n            sourceUrl\n          }\n          songListFile {\n            link\n          }\n        }\n      }\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSongListPage($databaseId: ID!, $asPreview: Boolean = false) {\n  page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        fullHead\n      }\n      title\n      content\n      songList {\n        hero {\n          body\n          heading\n          backgroundImage {\n            sourceUrl\n          }\n          songListFile {\n            link\n          }\n        }\n      }\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUpcomingShowsPage($databaseId: ID!, $asPreview: Boolean = false) {\n  page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        fullHead\n      }\n      title\n      content\n      upcomingShows {\n        featuredEvents {\n          eventEndTime\n          eventStartTime\n          eventTitle\n          eventLocation\n          eventBackgroundImage {\n            sourceUrl\n          }\n        }\n      }\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUpcomingShowsPage($databaseId: ID!, $asPreview: Boolean = false) {\n  page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        fullHead\n      }\n      title\n      content\n      upcomingShows {\n        featuredEvents {\n          eventEndTime\n          eventStartTime\n          eventTitle\n          eventLocation\n          eventBackgroundImage {\n            sourceUrl\n          }\n        }\n      }\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;